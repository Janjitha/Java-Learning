
🔰 PROGRAM 1: Print All Subarrays

📌 Problem:
Print all possible subarrays of a given array.

🧪 Sample Input:
Array = [1, 2, 3]

🧪 Sample Output:
1
1 2
1 2 3
2
2 3
3

💻 Java Code:
public class PrintAllSubarrays {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3};

        for (int i = 0; i < arr.length; i++) {
            for (int j = i; j < arr.length; j++) {
                for (int k = i; k <= j; k++) {
                    System.out.print(arr[k] + " ");
                }
                System.out.println();
            }
        }
    }
}

🖥️ Actual Output:
1 
1 2 
1 2 3 
2 
2 3 
3 

🧠 Explanation:
- Outer loop: starting index of subarray
- Middle loop: ending index of subarray
- Inner loop: prints elements from start to end index


🔰 PROGRAM 2: Maximum Subarray Sum (Brute Force)

📌 Problem:
Find the maximum sum of all possible subarrays using brute force.

🧪 Sample Input:
Array = [-2, 1, -3, 4, -1, 2, 1, -5, 4]

🧪 Sample Output:
Max Sum: 6

💻 Java Code:
public class MaxSubarrayBruteForce {
    public static void main(String[] args) {
        int[] arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        int maxSum = Integer.MIN_VALUE;

        for (int i = 0; i < arr.length; i++) {
            int currSum = 0;
            for (int j = i; j < arr.length; j++) {
                currSum += arr[j];
                maxSum = Math.max(maxSum, currSum);
            }
        }

        System.out.println("Max Sum: " + maxSum);
    }
}

🖥️ Actual Output:
Max Sum: 6

🧠 Explanation:
- Loop through all subarrays and calculate their sum.
- Track the maximum sum encountered.


🔰 PROGRAM 3: Maximum Subarray Sum (Kadane's Algorithm)

📌 Problem:
Find the maximum subarray sum using Kadane’s Algorithm (efficient).

🧪 Sample Input:
Array = [-2, 1, -3, 4, -1, 2, 1, -5, 4]

🧪 Sample Output:
Max Sum: 6

💻 Java Code:
public class KadaneAlgorithm {
    public static void main(String[] args) {
        int[] arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        int maxSum = arr[0];
        int currSum = arr[0];

        for (int i = 1; i < arr.length; i++) {
            currSum = Math.max(arr[i], currSum + arr[i]);
            maxSum = Math.max(maxSum, currSum);
        }

        System.out.println("Max Sum: " + maxSum);
    }
}

🖥️ Actual Output:
Max Sum: 6

🧠 Explanation:
- If current sum is less than current element, reset to current element.
- Keep track of max sum so far.


🔰 PROGRAM 4: Count Subarrays with Given Sum (Positive Only)

📌 Problem:
Count number of subarrays with a given sum using brute force.

🧪 Sample Input:
Array = [1, 2, 3, 4, 2], Target Sum = 5

🧪 Sample Output:
Count: 2

💻 Java Code:
public class CountSubarraysGivenSum {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 2};
        int target = 5;
        int count = 0;

        for (int i = 0; i < arr.length; i++) {
            int sum = 0;
            for (int j = i; j < arr.length; j++) {
                sum += arr[j];
                if (sum == target) count++;
            }
        }

        System.out.println("Count: " + count);
    }
}

🖥️ Actual Output:
Count: 2

🧠 Explanation:
- Try all subarrays and check if their sum equals target.


🔰 PROGRAM 5: Longest Subarray with Sum = K (Positive + Zero Only)

📌 Problem:
Find the longest subarray whose sum is equal to K.

🧪 Sample Input:
Array = [1, 2, 3, 1, 1, 1, 1], K = 6

🧪 Sample Output:
Max Length: 4

💻 Java Code:
public class LongestSubarraySumK {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 1, 1, 1, 1};
        int k = 6, maxLen = 0, sum = 0, start = 0;

        for (int end = 0; end < arr.length; end++) {
            sum += arr[end];
            while (sum > k) {
                sum -= arr[start++];
            }
            if (sum == k) {
                maxLen = Math.max(maxLen, end - start + 1);
            }
        }

        System.out.println("Max Length: " + maxLen);
    }
}

🖥️ Actual Output:
Max Length: 4

🧠 Explanation:
- Use sliding window: expand right, shrink left when sum > k.


🔰 PROGRAM 6: Subarray Sum Equals K (Handles Negative Numbers)

📌 Problem:
Find number of subarrays with sum equal to K (can include negatives).

🧪 Sample Input:
Array = [1, 1, 1], K = 2

🧪 Sample Output:
Subarrays count = 2

💻 Java Code:
import java.util.*;

public class SubarraySumWithMap {
    public static void main(String[] args) {
        int[] arr = {1, 1, 1};
        int k = 2;

        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        int sum = 0, count = 0;

        for (int num : arr) {
            sum += num;
            count += map.getOrDefault(sum - k, 0);
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }

        System.out.println("Subarrays count = " + count);
    }
}

🖥️ Actual Output:
Subarrays count = 2

🧠 Explanation:
- Use HashMap to store prefix sums and their frequency.


🔰 PROGRAM 7: Maximum Product Subarray

📌 Problem:
Find the maximum product of any subarray.

🧪 Sample Input:
Array = [2, 3, -2, 4]

🧪 Sample Output:
Max Product: 6

💻 Java Code:
public class MaxProductSubarray {
    public static void main(String[] args) {
        int[] arr = {2, 3, -2, 4};
        int maxProduct = arr[0], minProduct = arr[0], result = arr[0];

        for (int i = 1; i < arr.length; i++) {
            int temp = maxProduct;
            maxProduct = Math.max(arr[i], Math.max(maxProduct * arr[i], minProduct * arr[i]));
            minProduct = Math.min(arr[i], Math.min(temp * arr[i], minProduct * arr[i]));
            result = Math.max(result, maxProduct);
        }

        System.out.println("Max Product: " + result);
    }
}

🖥️ Actual Output:
Max Product: 6

🧠 Explanation:
- Track both max and min product because negative numbers can flip sign.


🔰 PROGRAM 8: Count Subarrays with Product Less Than K

📌 Problem:
Count the number of contiguous subarrays where the product is less than K.

🧪 Sample Input:
Array = [10, 5, 2, 6], K = 100

🧪 Sample Output:
Subarrays count = 8

💻 Java Code:
public class SubarraysProductLessThanK {
    public static void main(String[] args) {
        int[] arr = {10, 5, 2, 6};
        int k = 100;
        if (k <= 1) {
            System.out.println(0);
            return;
        }

        int prod = 1, left = 0, result = 0;

        for (int right = 0; right < arr.length; right++) {
            prod *= arr[right];
            while (prod >= k) {
                prod /= arr[left++];
            }
            result += right - left + 1;
        }

        System.out.println("Subarrays count = " + result);
    }
}

🖥️ Actual Output:
Subarrays count = 8

🧠 Explanation:
- Use sliding window and maintain product under K.
